D∆∞·ªõi ƒë√¢y l√† c·∫•u h√¨nh c∆° b·∫£n cho ESLint trong file eslint.config.mjs khi l√†m vi·ªác v·ªõi JavaScript, TypeScript, v√† React:

1. C√†i ƒë·∫∑t c√°c package c·∫ßn thi·∫øt
sh
Copy
Edit
npm install eslint @eslint/js @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-react eslint-plugin-prettier eslint-config-prettier prettier --save-dev
2. T·∫°o file eslint.config.mjs
T·∫°o file eslint.config.mjs ·ªü th∆∞ m·ª•c g·ªëc v√† th√™m n·ªôi dung sau:

js
Copy
Edit
import js from "@eslint/js";
import ts from "@typescript-eslint/eslint-plugin";
import tsParser from "@typescript-eslint/parser";
import react from "eslint-plugin-react";
import prettier from "eslint-plugin-prettier";
import prettierConfig from "eslint-config-prettier";

export default [
  js.configs.recommended, // Quy t·∫Øc m·∫∑c ƒë·ªãnh cho JS
  ts.configs.recommended, // Quy t·∫Øc cho TypeScript
  react.configs.recommended, // Quy t·∫Øc cho React
  prettier, // T√≠ch h·ª£p Prettier
  prettierConfig, // T·∫Øt c√°c quy t·∫Øc ESLint c√≥ th·ªÉ xung ƒë·ªôt v·ªõi Prettier
  {
    files: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"],
    languageOptions: {
      parser: tsParser,
      ecmaVersion: "latest",
      sourceType: "module",
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
    settings: {
      react: {
        version: "detect",
      },
    },
    rules: {
      "prettier/prettier": "error", // B√°o l·ªói n·∫øu kh√¥ng tu√¢n theo Prettier
      "react/react-in-jsx-scope": "off", // Kh√¥ng y√™u c·∫ßu import React trong JSX
      "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }], // Kh√¥ng b√°o l·ªói bi·∫øn `_`
    },
  },
];
3. Ch·∫°y ESLint
Ki·ªÉm tra l·ªói:

sh
Copy
Edit
npx eslint .
Fix l·ªói t·ª± ƒë·ªông:

sh
Copy
Edit
npx eslint . --fix
C·∫•u h√¨nh tr√™n gi√∫p ki·ªÉm tra l·ªói cho JavaScript, TypeScript, React v√† ƒë·ªìng b·ªô v·ªõi Prettier khi s·ª≠ d·ª•ng eslint.config.mjs. B·∫°n c√≥ th·ªÉ m·ªü r·ªông theo nhu c·∫ßu! üöÄ